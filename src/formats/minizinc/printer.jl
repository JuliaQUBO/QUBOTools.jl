function _print_metadata(io::IO, fmt::MiniZinc, data::Dict{Symbol,Any})
    println(io, "% ~*~ Generated by QUBOTools.jl ~*~ %")

    !isnothing(data[:id])          && println(io, "% id : $(data[:id])")
    !isnothing(data[:description]) && println(io, "% description : $(data[:description])")

    if !isnothing(data[:metadata])
        for (k, v) in data[:metadata]
            println(io, "% $(k) : $(JSON.json(v))")
        end
    end

    println(io, "float: scale = $(data[:scale]);")
    println(io, "float: offset = $(data[:offset]);")

    return nothing
end

function _print_domain(io::IO, ::MiniZinc{BoolDomain})
    println(io, "set of int: Domain = {0,1};")

    return nothing
end

function _print_domain(io::IO, ::MiniZinc{SpinDomain})
    println(io, "set of int: Domain = {-1,1};")

    return nothing
end

function _print_variables!(io::IO, ::MiniZinc, data::Dict{Symbol,Any})
    for i = 1:data[:domain_size]
        x = data[:variable_inv][i]

        data[:mzn_variables][x] = "$(_MINIZINC_VAR_SYMBOL)$(x)"
        
        println(io, "var Domain: $(data[:mzn_variables][x]);")
    end

    return nothing
end

function _print_objective!(io::IO, ::MiniZinc, data::Dict{Symbol,Any})
    for (i, l) in data[:linear_terms]
        xi = data[:mzn_variables][data[:variable_inv][i]]

        push!(data[:mzn_objective_terms], "$(l)*$(xi)")
    end

    for ((i, j), q) in data[:quadratic_terms]
        xi = data[:mzn_variables][data[:variable_inv][i]]
        xj = data[:mzn_variables][data[:variable_inv][j]]

        push!(data[:mzn_objective_terms], "$(q)*$(xi)*$(xj)")
    end

    if !isempty(data[:mzn_objective_terms])
        data[:mzn_objective_expr] = join(data[:mzn_objective_terms], " + ")
    end

    println(io, "var float: objective = $(data[:mzn_objective_expr]);")
    println(io, "solve minimize objective;")

    return nothing
end

function write_model(io::IO, model::AbstractModel{D}, fmt::MiniZinc{D}) where {D<:VariableDomain}
    data = Dict{Symbol,Any}(
        :linear_terms        => linear_terms(model),
        :quadratic_terms     => quadratic_terms(model),
        :scale               => scale(model),
        :offset              => offset(model),
        :domain_size         => domain_size(model),
        :id                  => id(model),
        :metadata            => metadata(model),
        :description         => description(model),
        :variable_inv        => variable_inv(model),
        :mzn_variables       => Dict{Int,String}(),
        :mzn_objective_terms => String[],
        :mzn_objective_expr  => "0",
    )

    _print_metadata(io, fmt, data)
    _print_domain(io, fmt)
    _print_variables!(io, fmt, data)
    _print_objective!(io, fmt, data)

    return nothing
end
